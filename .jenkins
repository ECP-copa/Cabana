pipeline {
    triggers {
        issueCommentTrigger('.*test this please.*')
    }
    agent none

    environment {
        CCACHE_DIR = '/tmp/ccache'
        CCACHE_MAXSIZE = '10G'
        CCACHE_CPP2 = 'true'
    }
    stages {
        stage('Build') {
            parallel {
                stage('CUDA-10.2-NVCC-DEBUG') {
                    agent {
                        dockerfile {
                            filename 'Dockerfile'
                            dir 'docker'
                            additionalBuildArgs '--build-arg BASE=nvidia/cuda:10.2-devel'
                            label 'nvidia-docker && volta'
                            args '-v /tmp/ccache.kokkos:/tmp/ccache --env NVIDIA_VISIBLE_DEVICES=$NVIDIA_VISIBLE_DEVICES'
                        }
                    }
                    steps {
                        sh 'ccache --zero-stats'
                        sh '''
                            rm -rf build && mkdir -p build && cd build && \
                            cmake \
                              -D CMAKE_BUILD_TYPE=Debug \
                              -D CMAKE_CXX_COMPILER=$KOKKOS_DIR/bin/nvcc_wrapper \
                              -D CMAKE_CXX_COMPILER_LAUNCHER=ccache \
                              -D CMAKE_CXX_FLAGS="-Wall -Wextra -Wpedantic" \
                              -D CMAKE_PREFIX_PATH="$KOKKOS_DIR;$ARBORX_DIR;$HEFFTE_DIR;$HYPRE_DIR" \
                              -D MPIEXEC_MAX_NUMPROCS=1 \
                              -D MPIEXEC_PREFLAGS="--allow-run-as-root;--mca;btl_smcuda_use_cuda_ipc;0" \
                              -D Cabana_REQUIRE_MPI=ON \
                              -D Cabana_REQUIRE_ARBORX=ON \
                              -D Cabana_REQUIRE_HEFFTE=ON \
                              -D Cabana_REQUIRE_CUDA=ON \
                              -D Cabana_ENABLE_TESTING=ON \
                              -D Cabana_ENABLE_PERFORMANCE_TESTING=ON \
                              -D Cabana_ENABLE_EXAMPLES=ON \
                            .. && \
                            make -j8 && \
                            ctest --output-on-failure
                        '''
                    }
                    post {
                        always {
                            sh 'ccache --show-stats'
                        }
                    }
                }
                stage('ROCM-4.2-HIPCC-DEBUG') {
                    agent {
                        dockerfile {
                            filename 'Dockerfile.hipcc'
                            dir 'docker'
                            additionalBuildArgs '--build-arg BASE=rocm/dev-ubuntu-18.04:4.2-complete'
                            args '-v /tmp/ccache.kokkos:/tmp/ccache --device=/dev/kfd --device=/dev/dri --security-opt seccomp=unconfined --group-add video --env HIP_VISIBLE_DEVICES=$HIP_VISIBLE_DEVICES'
                            label 'rocm-docker && vega && AMD_Radeon_Instinct_MI60'
                        }
                    }
                    steps {
                        sh 'ccache --zero-stats'
                        sh '''
                            rm -rf build && mkdir -p build && cd build && \
                            cmake \
                              -D CMAKE_BUILD_TYPE=Debug \
                              -D CMAKE_CXX_COMPILER=hipcc \
                              -D CMAKE_CXX_STANDARD=14 \
                              -D CMAKE_CXX_FLAGS="-Wall -Wextra -Wpedantic -DNDEBUG" \
                              -D MPIEXEC_MAX_NUMPROCS=1 \
                              -D MPIEXEC_PREFLAGS="--allow-run-as-root" \
                              -D CMAKE_PREFIX_PATH="$KOKKOS_DIR;$ARBORX_DIR;$HEFFTE_DIR" \
                              -D Cabana_REQUIRE_MPI=ON \
                              -D Cabana_REQUIRE_ARBORX=ON \
                              -D Cabana_REQUIRE_HEFFTE=ON \
                              -D Cabana_REQUIRE_HIP=ON \
                              -D Cabana_ENABLE_TESTING=ON \
                              -D Cabana_ENABLE_PERFORMANCE_TESTING=ON \
                              -D Cabana_ENABLE_EXAMPLES=ON \
                            .. && \
                            make -j8 && \
                            ctest --output-on-failure
                        '''
                    }
                    post {
                        always {
                            sh 'ccache --show-stats'
                        }
                    }
                }
                stage('SYCL') {
                    agent {
                        dockerfile {
                            filename "Dockerfile.sycl"
                            dir "docker"
                            args '-v /tmp/ccache.kokkos:/tmp/ccache'
                            label 'NVIDIA_Tesla_V100-PCIE-32GB && nvidia-docker'
                        }
                    }
                    steps {
                        sh 'ccache --zero-stats'
                        sh '''
                            rm -rf build && mkdir -p build && cd build && \
                            cmake \
                              -D CMAKE_BUILD_TYPE=Debug \
                              -D CMAKE_CXX_COMPILER=clang++ \
                              -D CMAKE_CXX_COMPILER_LAUNCHER=ccache \
                              -D CMAKE_CXX_FLAGS="-Wall -Wextra -Wpedantic -Wno-unknown-cuda-version -fsycl -fsycl-targets=nvptx64-nvidia-cuda-sycldevice" \
                              -D CMAKE_PREFIX_PATH="$KOKKOS_DIR" \
                              -D MPIEXEC_MAX_NUMPROCS=1 \
                              -D MPIEXEC_PREFLAGS="--allow-run-as-root" \
                              -D Cabana_REQUIRE_MPI=ON \
                              -D Cabana_REQUIRE_SYCL=ON \
                              -D Cabana_ENABLE_TESTING=ON \
                              -D Cabana_ENABLE_EXAMPLES=ON \
                              -D Cabana_ENABLE_CAJITA=OFF \
                            .. && \
                            make -j8 && \
                            ctest --output-on-failure
                        '''
                    }
                    post {
                        always {
                            sh 'ccache --show-stats'
                        }
                    }
                }
            }
        }
    }
}
