! ****************************************************************************
! * Copyright (c) 2018-2019 by the Cabana authors                            *
! * All rights reserved.                                                     *
! *                                                                          *
! * This file is part of the Cabana library. Cabana is distributed under a   *
! * BSD 3-clause license. For the licensing terms see the LICENSE file in    *
! * the top-level directory.                                                 *
! *                                                                          *
! * SPDX-License-Identifier: BSD-3-Clause                                    *
! ****************************************************************************
#include "veclen.h"

program example
  use, intrinsic :: iso_c_binding
  integer :: s,i
  integer, parameter :: N_PTL = 1048576
  integer, parameter :: N_SOA = ceiling(N_PTL/VECLEN)
  type, BIND(C) :: ptl_type      
     real (C_DOUBLE) :: d0(VECLEN) 
     real (C_DOUBLE) :: d1(VECLEN) 
  end type ptl_type
  !An interface is necessary for calling a function defined in C++  
  interface
     subroutine parallelForExample(part, num_soa, num_tuple) bind(C, name="parallelForExample")
       import::ptl_type, C_INT
       type(ptl_type) :: part(N_PTL)
       integer (C_INT), value :: num_soa, num_tuple
     end subroutine parallelForExample
  end interface
  
  interface
     subroutine c_kokkos_finalize() bind(C, name="c_kokkos_finalize")
       use iso_c_binding
     end subroutine c_kokkos_finalize
  end interface

  interface
     subroutine c_kokkos_initlize() bind(C, name="c_kokkos_initlize")
       use iso_c_binding
     end subroutine c_kokkos_initlize
  end interface

  type(ptl_type) :: part(N_SOA)

!!$  !Populate user data
!!$  do s = 1, N_SOA
!!$     do i = 1, VECLEN
!!$        part(s)%d0(i) = s;
!!$        part(s)%d1(i) = i;
!!$     end do
!!$  end do

  ! initialize Kokkos
  call c_kokkos_initlize()
  
  ! the parallelForExample is in C++, which takes the fortran allocated aosoa, and calls Fortran kernels.
  call parallelForExample(part,N_SOA,N_PLE);

  ! finalize Kokkos
  call c_kokkos_finalize()

end program example
