add_executable(ForParallelForUnmanaged Fortran_main.F90 Fortran_kernels.F90 parallel_for_example.cpp)
target_link_libraries(ForParallelForUnmanaged cabanacore ${MPI_Fortran_LIBRARIES})
add_test(NAME Fortran_advance_example_04 COMMAND ForParallelForUnmanaged)
set_property(TARGET ForParallelForUnmanaged PROPERTY LINKER_LANGUAGE Fortran)
add_definitions(${MPI_Fortran_COMPILE_FLAGS})
include_directories(${MPI_Fortran_INCLUDE_PATH} ${CMAKE_CURRENT_BINARY_DIR}/../Fortran_features)
link_directories(${MPI_Fortran_LIBRARIES})

message(${CMAKE_Fortran_COMPILER_ID})
if (("${CMAKE_Fortran_COMPILER_ID}" STREQUAL "PGI") AND ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "PGI"))
  if( Cabana_ENABLE_Cuda )
    target_compile_definitions(ForParallelForUnmanaged PUBLIC -DUSE_GPU=1)
    set(CMAKE_Fortran_FLAGS "-ta=tesla:cuda9.0 -Minfo=accel -Mcuda=cuda9.0")
    set(CMAKE_CXX_FLAGS "--relocatable-device-code=true")
  elseif( Cabana_ENABLE_OpenMP )
    target_compile_definitions(ForParallelForUnmanaged PUBLIC -DUSE_GPU=0)
    set(CMAKE_Fortran_FLAGS "-ta=multicore -mp")
  elseif( Cabana_ENABLE_Serial )
    target_compile_definitions(ForParallelForUnmanaged PUBLIC -DUSE_GPU=0)
    set(CMAKE_Fortran_FLAGS "-ta=host")
  endif()
  
  set(CMAKE_EXE_LINKER_FLAGS "-pgc++libs")
else()
    message("Only PGI is supported for compiling fortran cuda code. Right now
    we only accept building with PGI for both CXX and Fortran to avoid mixing
    compiler families.\n Skip.")
    return()
endif()
